library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
if(!file.exists("femaleMiceWeights.csv")) download(url,destfile=filename)
filename <- "femaleMiceWeights.csv"
if(!file.exists("femaleMiceWeights.csv")) download(url,destfile=filename)
dat <- read.csv(filename)
View(dat)
n <- 100
x <- sample(1:6, n, replace = TRUE)
x
mean(x==6)
x <- replicate(10000, sample(1:6, n, replace = TRUE))
mean(x==6)
var(x)
fd
plot(x)
clean
clean()
p <- 1/6
p
p_var <- p*(1-p)/n
p_var <- p*(1-p)/n;
z <- (mean(x==6) - p)/sqrt(p_var)
z
set.seed(1)
n <- 100
x <- replicate(10000, sample(1:6, n, replace = TRUE))
mean(x==6)
p <- 1/6
p_var <- p*(1-p)/n
z <- (mean(x==6) - p)/sqrt(p_var)
z
mean(2<=abs(z))
mean(abs(z)<=2)
(abs(z)>=2)
mean(abs(z)>=2)
zs <- replicate(10000, {
sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
set.seed(1)
sides <- 6
n <- 100
p <- 1/sides
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
mean(abs(z)>=2)
zs
plot(zs)
hist(zs)
righttail <- 1 - pnorm(zs)
pnorm(zs)
righttail <- 1 - pnorm(zs>=2)
pnorm
pnorm(zs>=2)
rm(righttail)
rm(z)
mean(abs(zs)>=2)
mean(abs(zs)>2)
qqplot(zs)
qqnorm(zs)
abline(0,1)
sides <- 5
n <- 5
p <- 1/sides
p_var <- p*(1-p)/n
set.seed(1)
sides <- 5
n <- 5
p <- 1/sides
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
sides <- 5
n <- 30
p <- 1/sides
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
sides <- 0.1
n <- 30
p <- 1/sides
cases <- 10
n <- 30
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
cases <- 100
n <- 30
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
set.seed(1)
cases <- 100
n <- 100
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
cases <- 5
n <- 30
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
set.seed(1)
cases <- 5
n <- 5
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
set.seed(1)
cases <- 5
n <- 30
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:6, n, replace = TRUE)
(mean(x==6) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
cases <- 5
n <- 30
p <- 1/cases
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:cases, n, replace = TRUE)
(mean(x==cases) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated
set.seed(1)
sides <- 6
n <- 100
p <- 1/sides
p_var <- p*(1-p)/n
zs <- replicate(10000, {
x <- sample(1:sides, n, replace = TRUE)
(mean(x==sides) - p)/sqrt(p_var)
})
qqnorm(zs)
abline(0,1) # We see that it is well approximated (CLT approved)
mean(abs(zs)>2)
X <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist
library(dplyr)
X <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist
pth <- ( mean(Y) - mean(X) )/2
pth
pth <- ( mean(Y) + mean(X) )/2
pth
mean(X)
sd(dat)
sd(X)
two_grams_off <- 2 * ( 1 - pnorm(2/sd(X) * sqrt(12)) )
two_grams_off
se_X_diff_Y <- sqrt(
var(Y)/12 +  var(X)/2
)
se_X_diff_Y
se_X_diff_Y <- sqrt(
var(Y)/12 +  var(X)/12
)
se_X_diff_Y
diff_in_mean_XY <- mean(Y) - mean(X)
diff_in_mean_XY
tstatXY <- diff_in_mean_XY/se_X_diff_Y
tstatXY
1 - pt(3,df=3)
1 - pt(3,df=15)
1 - pt(3,df=30)
1 - pnorm(3)
?pt
t.stat(Y, X)
t.test(Y, X)
2*(1-pnorm(2.055174))
tstatXY
t.test(Y, X)
t.test(X,Y)$p.value
